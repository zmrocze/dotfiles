
** Conflict (shift/reduce) in state 171.
** Token involved: ELSE
** This state is reached from source_file after reading:

identifier BRACE_LEFT loption(separated_nonempty_list(COMMA,parse_node(parse_var_declaration))) BRACE_RIGHT parse_opt_type_decl IF parse_expression IF parse_expression parse_statement

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

source_file 
list(parse_node(parse_global_definition)) EOF 
parse_global_definition list(parse_node(parse_global_definition)) 
parse_gdef_function 
identifier BRACE_LEFT loption(separated_nonempty_list(COMMA,parse_node(parse_var_declaration))) BRACE_RIGHT parse_opt_type_decl parse_statement 
                                                                                                                                parse_statement_not_empty_return 
                                                                                                                                (?)

** In state 171, looking ahead at ELSE, reducing production
** option(preceded(ELSE,parse_node(parse_statement))) ->
** is permitted because of the following sub-derivation:

IF parse_expression parse_statement option(preceded(ELSE,parse_node(parse_statement))) // lookahead token appears because option(preceded(ELSE,parse_node(parse_statement))) can begin with ELSE
                    parse_statement_not_empty_return // lookahead token is inherited
                    IF parse_expression parse_statement option(preceded(ELSE,parse_node(parse_statement))) // lookahead token is inherited
                                                        . 

** In state 171, looking ahead at ELSE, shifting is permitted
** because of the following sub-derivation:

IF parse_expression parse_statement option(preceded(ELSE,parse_node(parse_statement))) 
                    parse_statement_not_empty_return 
                    IF parse_expression parse_statement option(preceded(ELSE,parse_node(parse_statement))) 
                                                        . ELSE parse_statement 
