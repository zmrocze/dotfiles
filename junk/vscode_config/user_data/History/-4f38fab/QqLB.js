// Generated by purs version 0.14.9
"use strict";
var Aeson = require("../Aeson/index.js");
var Contract_Config = require("../Contract.Config/index.js");
var Contract_Log = require("../Contract.Log/index.js");
var Contract_Transaction = require("../Contract.Transaction/index.js");
var Contract_Utxos = require("../Contract.Utxos/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Promise = require("../Control.Promise/index.js");
var Ctl_Internal_Contract_AwaitTxConfirmed = require("../Ctl.Internal.Contract.AwaitTxConfirmed/index.js");
var Ctl_Internal_Contract_Monad = require("../Ctl.Internal.Contract.Monad/index.js");
var Ctl_Internal_FromData = require("../Ctl.Internal.FromData/index.js");
var Ctl_Internal_Helpers = require("../Ctl.Internal.Helpers/index.js");
var Ctl_Internal_IsData = require("../Ctl.Internal.IsData/index.js");
var Ctl_Internal_Plutus_Types_Address = require("../Ctl.Internal.Plutus.Types.Address/index.js");
var Ctl_Internal_Plutus_Types_TransactionUnspentOutput = require("../Ctl.Internal.Plutus.Types.TransactionUnspentOutput/index.js");
var Ctl_Internal_Plutus_Types_Value = require("../Ctl.Internal.Plutus.Types.Value/index.js");
var Ctl_Internal_Scripts = require("../Ctl.Internal.Scripts/index.js");
var Ctl_Internal_ToData = require("../Ctl.Internal.ToData/index.js");
var Ctl_Internal_Types_BigNum = require("../Ctl.Internal.Types.BigNum/index.js");
var Ctl_Internal_Types_ByteArray = require("../Ctl.Internal.Types.ByteArray/index.js");
var Ctl_Internal_Types_Datum = require("../Ctl.Internal.Types.Datum/index.js");
var Ctl_Internal_Types_PlutusData = require("../Ctl.Internal.Types.PlutusData/index.js");
var Ctl_Internal_Types_Redeemer = require("../Ctl.Internal.Types.Redeemer/index.js");
var Ctl_Internal_Types_ScriptLookups = require("../Ctl.Internal.Types.ScriptLookups/index.js");
var Ctl_Internal_Types_Scripts = require("../Ctl.Internal.Types.Scripts/index.js");
var Ctl_Internal_Types_TokenName = require("../Ctl.Internal.Types.TokenName/index.js");
var Ctl_Internal_Types_Transaction = require("../Ctl.Internal.Types.Transaction/index.js");
var Ctl_Internal_Types_TxConstraints = require("../Ctl.Internal.Types.TxConstraints/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Lens_Getter = require("../Data.Lens.Getter/index.js");
var Data_Lens_Internal_Forget = require("../Data.Lens.Internal.Forget/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Effect_Unsafe = require("../Effect.Unsafe/index.js");
var MLabsPlutusTemplate_Scripts = require("../MLabsPlutusTemplate.Scripts/index.js");
var Ply_Apply = require("../Ply.Apply/index.js");
var Ply_Reify = require("../Ply.Reify/index.js");
var Ply_Typename = require("../Ply.Typename/index.js");
var Ply_Types = require("../Ply.Types/index.js");
var PWTXHash = function (x) {
    return x;
};
var MintTokens = (function () {
    function MintTokens() {

    };
    MintTokens.value = new MintTokens();
    return MintTokens;
})();
var BurnTokens = (function () {
    function BurnTokens() {

    };
    BurnTokens.value = new BurnTokens();
    return BurnTokens;
})();
var toDataMintRedeemer = {
    toData: function (v) {
        if (v instanceof MintTokens) {
            return new Ctl_Internal_Types_PlutusData.Constr(Ctl_Internal_Types_BigNum.fromInt(0), [  ]);
        };
        if (v instanceof BurnTokens) {
            return new Ctl_Internal_Types_PlutusData.Constr(Ctl_Internal_Types_BigNum.fromInt(1), [  ]);
        };
        throw new Error("Failed pattern match at MlabsPlutusTemplate.Api (line 291, column 12 - line 293, column 47): " + [ v.constructor.name ]);
    }
};
var newtypePWTXHash_ = {
    Coercible0: function () {
        return undefined;
    }
};
var genericMintRedeemer_ = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return MintTokens.value;
        };
        if (x instanceof Data_Generic_Rep.Inr) {
            return BurnTokens.value;
        };
        throw new Error("Failed pattern match at MlabsPlutusTemplate.Api (line 286, column 1 - line 286, column 39): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof MintTokens) {
            return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
        };
        if (x instanceof BurnTokens) {
            return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
        };
        throw new Error("Failed pattern match at MlabsPlutusTemplate.Api (line 286, column 1 - line 286, column 39): " + [ x.constructor.name ]);
    }
};
var eqMintRedeemer = {
    eq: function (x) {
        return function (y) {
            if (x instanceof MintTokens && y instanceof MintTokens) {
                return true;
            };
            if (x instanceof BurnTokens && y instanceof BurnTokens) {
                return true;
            };
            return false;
        };
    }
};
var ordMintRedeemer = {
    compare: function (x) {
        return function (y) {
            if (x instanceof MintTokens && y instanceof MintTokens) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof MintTokens) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof MintTokens) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof BurnTokens && y instanceof BurnTokens) {
                return Data_Ordering.EQ.value;
            };
            throw new Error("Failed pattern match at MlabsPlutusTemplate.Api (line 288, column 1 - line 288, column 33): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqMintRedeemer;
    }
};
var stringToTokenName = Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(Ctl_Internal_Types_ByteArray.byteArrayFromAscii)(Ctl_Internal_Types_TokenName.mkTokenName);
var square = function (n) {
    return n * n | 0;
};
var lookupTXHashByPW = function (str) {
    return function (arr) {
        return Data_Array.find(function (x) {
            return (Data_Newtype.unwrap()(x)).password === str;
        })(arr);
    };
};
var liftErr = function (dictMonadThrow) {
    return function (msg) {
        return function (a) {
            return Control_Monad_Error_Class.liftMaybe(dictMonadThrow)(Effect_Exception.error(msg))(a);
        };
    };
};
var mkCurrencySymbol = function (mintingPolicy) {
    return Control_Bind.bind(Ctl_Internal_Contract_Monad.bindContract)(mintingPolicy)(function (mp) {
        return Control_Bind.bind(Ctl_Internal_Contract_Monad.bindContract)(liftErr(Ctl_Internal_Contract_Monad.monadThrowErrorContract)("Cannot get cs")(Ctl_Internal_Scripts.scriptCurrencySymbol(mp)))(function (cs) {
            return Control_Applicative.pure(Ctl_Internal_Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(mp, cs));
        });
    });
};
var passwordValidator = function (str) {
    return Control_Bind.bind(Ctl_Internal_Contract_Monad.bindContract)(liftErr(Ctl_Internal_Contract_Monad.monadThrowErrorContract)("invalid json")(Data_Either.hush(Aeson.parseJsonStringToAeson(MLabsPlutusTemplate_Scripts.password_validator))))(function (aeson) {
        return Control_Bind.bind(Ctl_Internal_Contract_Monad.bindContract)(liftErr(Ctl_Internal_Contract_Monad.monadThrowErrorContract)("Error reading validator envelope: \x0a" + MLabsPlutusTemplate_Scripts.password_validator)(Data_Either.hush(Aeson.decodeAeson(Ply_Types.decodeAesonTypedScriptEnv)(aeson))))(function (envelope) {
            return Control_Bind.bind(Ctl_Internal_Contract_Monad.bindContract)(liftErr(Ctl_Internal_Contract_Monad.monadThrowErrorContract)("Error decoding password envelope")(Data_Either.hush(Ply_Reify.reifyTypedScript(Ply_Reify.reifyRoleValidatorRole)(Ply_Reify.reifyParamsCons(Ply_Reify.reifyParamsNil)(Ply_Typename.plyTypeName1(Ply_Typename.plyTypeNameAsData)(Ply_Typename.plyTypeNameByteArray)))(envelope))))(function (tvalidator) {
                return Control_Bind.bind(Ctl_Internal_Contract_Monad.bindContract)(liftErr(Ctl_Internal_Contract_Monad.monadThrowErrorContract)("Error: Non-ascii chars in password")(Ctl_Internal_Types_ByteArray.byteArrayFromAscii(str)))(function (pw) {
                    var v = Ply_Apply.applyParam(Ctl_Internal_ToData.toDataByteArray)(tvalidator)(pw);
                    if (v instanceof Data_Either.Left) {
                        return Control_Monad_Error_Class.throwError(Ctl_Internal_Contract_Monad.monadThrowErrorContract)(Effect_Exception.error(Data_Show.show(Ply_Types.showPlyError)(v.value0)));
                    };
                    if (v instanceof Data_Either.Right) {
                        return Control_Applicative.pure(Ctl_Internal_Contract_Monad.applicativeContract)(Ctl_Internal_Types_Scripts.Validator(Ply_Types.toPlutusScript(v.value0)));
                    };
                    throw new Error("Failed pattern match at MlabsPlutusTemplate.Api (line 187, column 3 - line 189, column 69): " + [ v.constructor.name ]);
                });
            });
        });
    });
};
var spendFromPassword$prime = function (pwStr) {
    return function (txId) {
        return Control_Bind.bind(Ctl_Internal_Contract_Monad.bindContract)(passwordValidator(pwStr))(function (validator) {
            var vhash = Ctl_Internal_Scripts.validatorHash(validator);
            var scriptAddress = Ctl_Internal_Plutus_Types_Address.scriptHashAddress(vhash)(Data_Maybe.Nothing.value);
            return Control_Bind.bind(Ctl_Internal_Contract_Monad.bindContract)(Contract_Utxos.utxosAt(Ctl_Internal_Plutus_Types_Address.plutusAddressAddress)(scriptAddress))(function (utxos) {
                return Control_Bind.bind(Ctl_Internal_Contract_Monad.bindContract)(Ctl_Internal_Helpers.liftM(Ctl_Internal_Contract_Monad.monadErrorErrorContract)(Effect_Exception.error("The id " + (Data_Show.show(Ctl_Internal_Types_Transaction.showTransactionHash)(txId) + (" does not have output locked at: " + Data_Show.show(Ctl_Internal_Plutus_Types_Address.showAddress)(scriptAddress)))))(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Lens_Getter.view(Ctl_Internal_Plutus_Types_TransactionUnspentOutput["_input"](Data_Lens_Internal_Forget.strongForget)))(Data_Array.head(Ctl_Internal_Plutus_Types_TransactionUnspentOutput.lookupTxHash(txId)(utxos)))))(function (txInput) {
                    var lookups = Data_Semigroup.append(Ctl_Internal_Types_ScriptLookups.semigroupScriptLookups)(Ctl_Internal_Types_ScriptLookups.validator(validator))(Ctl_Internal_Types_ScriptLookups.unspentOutputs(utxos));
                    var constraints = Ctl_Internal_Types_TxConstraints.mustSpendScriptOutput(txInput)(Ctl_Internal_Types_Redeemer.unitRedeemer);
                    return Control_Bind.bind(Ctl_Internal_Contract_Monad.bindContract)(Contract_Transaction.submitTxFromConstraints()(Ctl_Internal_IsData.isData(Ctl_Internal_FromData.fromDataUnit)(Ctl_Internal_ToData.toDataUnit))(Ctl_Internal_IsData.isData(Ctl_Internal_FromData.fromDataUnit)(Ctl_Internal_ToData.toDataUnit))(lookups)(constraints))(function (spendTxId) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Ctl_Internal_Contract_Monad.bindContract)(Ctl_Internal_Contract_AwaitTxConfirmed.awaitTxConfirmed(spendTxId))(function () {
                            return Contract_Log["logInfo'"](Ctl_Internal_Contract_Monad.monadLoggerContract)("Successfully spent locked values.");
                        });
                    });
                });
            });
        });
    };
};
var payToPassword$prime = function (pwStr) {
    return function (adaValStr) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Ctl_Internal_Contract_Monad.bindContract)(Contract_Log["logInfo'"](Ctl_Internal_Contract_Monad.monadLoggerContract)("Paying to Password validator..."))(function () {
            return Control_Bind.bind(Ctl_Internal_Contract_Monad.bindContract)(passwordValidator(pwStr))(function (validator) {
                return Control_Bind.bind(Ctl_Internal_Contract_Monad.bindContract)(liftErr(Ctl_Internal_Contract_Monad.monadThrowErrorContract)("Error: Invalid ada value string")(Data_BigInt.fromString(adaValStr)))(function (adaVal) {
                    var vhash = Ctl_Internal_Scripts.validatorHash(validator);
                    var lookups = Data_Monoid.mempty(Ctl_Internal_Types_ScriptLookups.monoidScriptLookups);
                    var constraints = Ctl_Internal_Types_TxConstraints.mustPayToScript(vhash)(Ctl_Internal_Types_Datum.unitDatum)(Ctl_Internal_Types_TxConstraints.DatumWitness.value)(Ctl_Internal_Plutus_Types_Value.lovelaceValueOf(Data_Semiring.mul(Data_BigInt.semiringBigInt)(adaVal)(Data_BigInt.fromInt(1000000))));
                    return Control_Bind.discard(Control_Bind.discardUnit)(Ctl_Internal_Contract_Monad.bindContract)(Contract_Log["logInfo'"](Ctl_Internal_Contract_Monad.monadLoggerContract)("Attempting to submit..."))(function () {
                        return Control_Bind.bind(Ctl_Internal_Contract_Monad.bindContract)(Contract_Transaction.submitTxFromConstraints()(Ctl_Internal_IsData.isData(Ctl_Internal_FromData.fromDataUnit)(Ctl_Internal_ToData.toDataUnit))(Ctl_Internal_IsData.isData(Ctl_Internal_FromData.fromDataUnit)(Ctl_Internal_ToData.toDataUnit))(lookups)(constraints))(function (txhash) {
                            return Control_Bind.discard(Control_Bind.discardUnit)(Ctl_Internal_Contract_Monad.bindContract)(Contract_Log["logInfo'"](Ctl_Internal_Contract_Monad.monadLoggerContract)("Successfully paid to password validator"))(function () {
                                return Control_Applicative.pure(Ctl_Internal_Contract_Monad.applicativeContract)(txhash);
                            });
                        });
                    });
                });
            });
        });
    };
};
var simplePolicy = function (str) {
    return Control_Bind.bind(Ctl_Internal_Contract_Monad.bindContract)(liftErr(Ctl_Internal_Contract_Monad.monadThrowErrorContract)("invalid json")(Data_Either.hush(Aeson.parseJsonStringToAeson(MLabsPlutusTemplate_Scripts.simple_policy))))(function (aeson) {
        return Control_Bind.bind(Ctl_Internal_Contract_Monad.bindContract)(liftErr(Ctl_Internal_Contract_Monad.monadThrowErrorContract)("Error decoding simple policy envelope: \x0a" + MLabsPlutusTemplate_Scripts.simple_policy)(Data_Either.hush(Aeson.decodeAeson(Ply_Types.decodeAesonTypedScriptEnv)(aeson))))(function (envelope) {
            return Control_Bind.bind(Ctl_Internal_Contract_Monad.bindContract)(liftErr(Ctl_Internal_Contract_Monad.monadThrowErrorContract)("Error converting policy envelope to script")(Data_Either.hush(Ply_Reify.reifyTypedScript(Ply_Reify.reifyRoleMintingPolicyRol)(Ply_Reify.reifyParamsCons(Ply_Reify.reifyParamsNil)(Ply_Typename.plyTypeName1(Ply_Typename.plyTypeNameAsData)(Ply_Typename.plyTypeNameTokenName)))(envelope))))(function (tpolicy) {
                return Control_Bind.bind(Ctl_Internal_Contract_Monad.bindContract)(liftErr(Ctl_Internal_Contract_Monad.monadThrowErrorContract)("Error: Invalid tokenName")(stringToTokenName(str)))(function (tkNm) {
                    var v = Ply_Apply.applyParam(Ctl_Internal_Types_TokenName.toDataTokenName)(tpolicy)(tkNm);
                    if (v instanceof Data_Either.Left) {
                        return Control_Monad_Error_Class.throwError(Ctl_Internal_Contract_Monad.monadThrowErrorContract)(Effect_Exception.error(Data_Show.show(Ply_Types.showPlyError)(v.value0)));
                    };
                    if (v instanceof Data_Either.Right) {
                        return Control_Applicative.pure(Ctl_Internal_Contract_Monad.applicativeContract)(Ctl_Internal_Types_Scripts.PlutusMintingPolicy.create(Ply_Types.toPlutusScript(v.value0)));
                    };
                    throw new Error("Failed pattern match at MlabsPlutusTemplate.Api (line 278, column 3 - line 280, column 79): " + [ v.constructor.name ]);
                });
            });
        });
    });
};
var mintTokens$prime = function (tkStr) {
    return function (amt) {
        return Control_Bind.bind(Ctl_Internal_Contract_Monad.bindContract)(liftErr(Ctl_Internal_Contract_Monad.monadThrowErrorContract)("Invalid MintAmount String")(Data_BigInt.fromString(amt)))(function (toMint) {
            return Control_Bind.bind(Ctl_Internal_Contract_Monad.bindContract)(mkCurrencySymbol(simplePolicy(tkStr)))(function (v) {
                return Control_Bind.bind(Ctl_Internal_Contract_Monad.bindContract)(liftErr(Ctl_Internal_Contract_Monad.monadThrowErrorContract)("Invalid TokenName String")(stringToTokenName(tkStr)))(function (tn) {
                    var lookups = Ctl_Internal_Types_ScriptLookups.mintingPolicy(v.value0);
                    var constraints = Ctl_Internal_Types_TxConstraints.mustMintValueWithRedeemer(Ctl_Internal_Types_Redeemer.Redeemer(Ctl_Internal_ToData.toData(toDataMintRedeemer)(MintTokens.value)))(Ctl_Internal_Plutus_Types_Value.singleton(v.value1)(tn)(toMint));
                    return Control_Bind.bind(Ctl_Internal_Contract_Monad.bindContract)(Contract_Transaction.submitTxFromConstraints()(Ctl_Internal_IsData.isData(Ctl_Internal_FromData.fromDataVoid)(Ctl_Internal_ToData.toDataVoid))(Ctl_Internal_IsData.isData(Ctl_Internal_FromData.fromDataVoid)(Ctl_Internal_ToData.toDataVoid))(lookups)(constraints))(function (txId) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Ctl_Internal_Contract_Monad.bindContract)(Ctl_Internal_Contract_AwaitTxConfirmed.awaitTxConfirmed(txId))(function () {
                            return Contract_Log["logInfo'"](Ctl_Internal_Contract_Monad.monadLoggerContract)("Tx submitted successfully!");
                        });
                    });
                });
            });
        });
    };
};
var execContract$prime = function (contract) {
    return Effect_Unsafe.unsafePerformEffect(Control_Promise.fromAff(Ctl_Internal_Contract_Monad.runContract(Contract_Config.testnetEternlConfig)(contract)));
};
var payToPassword = function (pw, adaVal) {
    return execContract$prime(payToPassword$prime(pw)(adaVal));
};
var execContract = function (contract) {
    return Effect_Unsafe.unsafePerformEffect(Effect_Aff.launchAff_(Ctl_Internal_Contract_Monad.runContract(Contract_Config.testnetEternlConfig)(contract)));
};
var mintTokens = function (tkStr) {
    return function (amt) {
        return execContract(mintTokens$prime(tkStr)(amt));
    };
};
var spendFromPassword = function (txhash, pwStr) {
    return execContract(spendFromPassword$prime(pwStr)(txhash));
};
var deletePWTXHash = function (str) {
    return function (arr) {
        return Data_Array.filter(function (x) {
            return (Data_Newtype.unwrap()(x)).password !== str;
        })(arr);
    };
};
var insertPWTXHash = function (str) {
    return function (txhash) {
        return function (arr) {
            return Data_Array.cons(Data_Newtype.wrap()({
                password: str,
                txhash: txhash
            }))(deletePWTXHash(str)(arr));
        };
    };
};
var byteArrayToData = Ctl_Internal_Types_PlutusData.Bytes.create;
var burnTokens$prime = function (tkStr) {
    return function (amt) {
        return Control_Bind.bind(Ctl_Internal_Contract_Monad.bindContract)(liftErr(Ctl_Internal_Contract_Monad.monadThrowErrorContract)("Invalid MintAmount String")(Data_BigInt.fromString(amt)))(function (toMint) {
            return Control_Bind.bind(Ctl_Internal_Contract_Monad.bindContract)(mkCurrencySymbol(simplePolicy(tkStr)))(function (v) {
                return Control_Bind.bind(Ctl_Internal_Contract_Monad.bindContract)(liftErr(Ctl_Internal_Contract_Monad.monadThrowErrorContract)("Invalid TokenName String")(stringToTokenName(tkStr)))(function (tn) {
                    var lookups = Ctl_Internal_Types_ScriptLookups.mintingPolicy(v.value0);
                    var constraints = Ctl_Internal_Types_TxConstraints.mustMintValueWithRedeemer(Ctl_Internal_Types_Redeemer.Redeemer(Ctl_Internal_ToData.toData(toDataMintRedeemer)(BurnTokens.value)))(Ctl_Internal_Plutus_Types_Value.singleton(v.value1)(tn)(toMint));
                    return Control_Bind.bind(Ctl_Internal_Contract_Monad.bindContract)(Contract_Transaction.submitTxFromConstraints()(Ctl_Internal_IsData.isData(Ctl_Internal_FromData.fromDataVoid)(Ctl_Internal_ToData.toDataVoid))(Ctl_Internal_IsData.isData(Ctl_Internal_FromData.fromDataVoid)(Ctl_Internal_ToData.toDataVoid))(lookups)(constraints))(function (txId) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Ctl_Internal_Contract_Monad.bindContract)(Ctl_Internal_Contract_AwaitTxConfirmed.awaitTxConfirmed(txId))(function () {
                            return Contract_Log["logInfo'"](Ctl_Internal_Contract_Monad.monadLoggerContract)("Tx submitted successfully!");
                        });
                    });
                });
            });
        });
    };
};
var burnTokens = function (tkStr) {
    return function (amt) {
        return execContract(burnTokens$prime(tkStr)(amt));
    };
};
module.exports = {
    square: square,
    payToPassword: payToPassword,
    spendFromPassword: spendFromPassword,
    mintTokens: mintTokens,
    burnTokens: burnTokens,
    insertPWTXHash: insertPWTXHash,
    lookupTXHashByPW: lookupTXHashByPW,
    deletePWTXHash: deletePWTXHash,
    newtypePWTXHash_: newtypePWTXHash_
};
