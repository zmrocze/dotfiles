diff --git a/plutus-ledger-api/src/Plutus/V1/Ledger/Tx.hs b/plutus-ledger-api/src/Plutus/V1/Ledger/Tx.hs
index e31a8c311..f06d68bce 100644
--- a/plutus-ledger-api/src/Plutus/V1/Ledger/Tx.hs
+++ b/plutus-ledger-api/src/Plutus/V1/Ledger/Tx.hs
@@ -1,44 +1,25 @@
-{-# LANGUAGE DeriveAnyClass     #-}
-{-# LANGUAGE DeriveGeneric      #-}
-{-# LANGUAGE DerivingStrategies #-}
-{-# LANGUAGE FlexibleContexts   #-}
-{-# LANGUAGE FlexibleInstances  #-}
-{-# LANGUAGE LambdaCase         #-}
-{-# LANGUAGE NamedFieldPuns     #-}
-{-# LANGUAGE OverloadedStrings  #-}
-{-# LANGUAGE RecordWildCards    #-}
-{-# LANGUAGE TemplateHaskell    #-}
+{-# LANGUAGE DeriveAnyClass    #-}
+{-# LANGUAGE DeriveGeneric     #-}
+{-# LANGUAGE DerivingVia       #-}
+{-# LANGUAGE FlexibleContexts  #-}
+{-# LANGUAGE FlexibleInstances #-}
+{-# LANGUAGE LambdaCase        #-}
+{-# LANGUAGE NamedFieldPuns    #-}
+{-# LANGUAGE OverloadedStrings #-}
+{-# LANGUAGE RecordWildCards   #-}
+{-# LANGUAGE TemplateHaskell   #-}
 {-# OPTIONS_GHC -fno-warn-orphans #-}
 {-# OPTIONS_GHC -fno-specialise #-}
 {-# OPTIONS_GHC -fno-omit-interface-pragmas #-}
 
 module Plutus.V1.Ledger.Tx(
     -- * Transactions
-    Tx(..),
-    inputs,
-    collateralInputs,
-    outputs,
-    spentOutputs,
-    updateUtxoCollateral,
-    validValuesTx,
-    mintScripts,
-    signatures,
-    datumWitnesses,
-    redeemers,
-    lookupSignature,
-    lookupDatum,
-    lookupRedeemer,
-    mint,
-    fee,
+    TxId (..),
     ScriptTag (..),
     RedeemerPtr (..),
     Redeemers,
-    -- ** Stripped transactions
-    TxStripped(..),
-    strip,
     -- * Transaction outputs
     TxOut(..),
-    TxOutTx(..),
     TxOutRef(..),
     isPubKeyOut,
     isPayToScriptOut,
@@ -47,215 +28,56 @@ module Plutus.V1.Ledger.Tx(
     txOutPubKey,
     txOutDatum,
     pubKeyHashTxOut,
-    txOutTxDatum,
     -- * Transaction inputs
     TxInType(..),
     TxIn(..),
     inRef,
     inType,
     inScripts,
-    validRange,
     pubKeyTxIn,
     scriptTxIn,
     pubKeyTxIns,
     scriptTxIns,
-    -- * Addresses
-    Address
     ) where
 
-import Codec.CBOR.Write qualified as Write
-import Codec.Serialise.Class (Serialise, encode)
 import Control.DeepSeq (NFData)
 import Control.Lens
-import Data.Aeson (FromJSON, FromJSONKey (..), ToJSON, ToJSONKey (..))
-import Data.ByteArray qualified as BA
 import Data.Map (Map)
-import Data.Map qualified as Map
 import Data.Maybe (isJust)
 import Data.Set qualified as Set
+import Data.String (IsString)
 import GHC.Generics (Generic)
 import Prettyprinter
 
 import PlutusTx qualified
 import PlutusTx.Bool qualified as PlutusTx
+import PlutusTx.Builtins qualified as PlutusTx
 import PlutusTx.Eq qualified as PlutusTx
-import PlutusTx.Lattice
+import PlutusTx.Ord qualified as PlutusTx
 
 import Plutus.V1.Ledger.Address
+import Plutus.V1.Ledger.Bytes
 import Plutus.V1.Ledger.Crypto
-import Plutus.V1.Ledger.Orphans ()
 import Plutus.V1.Ledger.Scripts
-import Plutus.V1.Ledger.Slot
-import Plutus.V1.Ledger.TxId
 import Plutus.V1.Ledger.Value
-import Plutus.V1.Ledger.Value qualified as V
-
-{- Note [Serialisation and hashing]
-
-We use cryptonite for generating hashes, which requires us to serialise values
-to a strict ByteString (to implement `Data.ByteArray.ByteArrayAccess`).
-
-Binary serialisation could be achieved via
-
-1. The `binary` package
-2. The `cbor` package
-
-(1) is used in the cardano-sl repository, and (2) is used in the
-`plutus-core` project in this repository.
-
-In this module we use (2) because of the precedent. This means however that we
-may generate different hashes for the same transactions compared to cardano-sl.
-This might become a problem if/when we want to support "imports" of some real
-blockchain state into the emulator.
-
-However, it should be easy to change the serialisation mechanism later on,
-especially because we only need one direction (to binary).
-
--}
-
--- | A transaction, including witnesses for its inputs.
-data Tx = Tx {
-    txInputs      :: Set.Set TxIn,
-    -- ^ The inputs to this transaction.
-    txCollateral  :: Set.Set TxIn,
-    -- ^ The collateral inputs to cover the fees in case validation of the transaction fails.
-    txOutputs     :: [TxOut],
-    -- ^ The outputs of this transaction, ordered so they can be referenced by index.
-    txMint        :: !Value,
-    -- ^ The 'Value' minted by this transaction.
-    txFee         :: !Value,
-    -- ^ The fee for this transaction.
-    txValidRange  :: !SlotRange,
-    -- ^ The 'SlotRange' during which this transaction may be validated.
-    txMintScripts :: Set.Set MintingPolicy,
-    -- ^ The scripts that must be run to check minting conditions.
-    txSignatures  :: Map PubKey Signature,
-    -- ^ Signatures of this transaction.
-    txRedeemers   :: Redeemers,
-    -- ^ Redeemers of the minting scripts.
-    txData        :: Map DatumHash Datum
-    -- ^ Datum objects recorded on this transaction.
-    } deriving stock (Show, Eq, Generic)
-      deriving anyclass (ToJSON, FromJSON, Serialise, NFData)
-
-instance Semigroup Tx where
-    tx1 <> tx2 = Tx {
-        txInputs = txInputs tx1 <> txInputs tx2,
-        txCollateral = txCollateral tx1 <> txCollateral tx2,
-        txOutputs = txOutputs tx1 <> txOutputs tx2,
-        txMint = txMint tx1 <> txMint tx2,
-        txFee = txFee tx1 <> txFee tx2,
-        txValidRange = txValidRange tx1 /\ txValidRange tx2,
-        txMintScripts = txMintScripts tx1 <> txMintScripts tx2,
-        txSignatures = txSignatures tx1 <> txSignatures tx2,
-        txRedeemers = txRedeemers tx1 <> txRedeemers tx2,
-        txData = txData tx1 <> txData tx2
-        }
-
-instance Monoid Tx where
-    mempty = Tx mempty mempty mempty mempty mempty top mempty mempty mempty mempty
-
-instance BA.ByteArrayAccess Tx where
-    length        = BA.length . Write.toStrictByteString . encode
-    withByteArray = BA.withByteArray . Write.toStrictByteString . encode
-
--- | The inputs of a transaction.
-inputs :: Lens' Tx (Set.Set TxIn)
-inputs = lens g s where
-    g = txInputs
-    s tx i = tx { txInputs = i }
-
--- | The collateral inputs of a transaction for paying fees when validating the transaction fails.
-collateralInputs :: Lens' Tx (Set.Set TxIn)
-collateralInputs = lens g s where
-    g = txCollateral
-    s tx i = tx { txCollateral = i }
-
--- | The outputs of a transaction.
-outputs :: Lens' Tx [TxOut]
-outputs = lens g s where
-    g = txOutputs
-    s tx o = tx { txOutputs = o }
-
--- | The validity range of a transaction.
-validRange :: Lens' Tx SlotRange
-validRange = lens g s where
-    g = txValidRange
-    s tx o = tx { txValidRange = o }
-
-signatures :: Lens' Tx (Map PubKey Signature)
-signatures = lens g s where
-    g = txSignatures
-    s tx sig = tx { txSignatures = sig }
-
-fee :: Lens' Tx Value
-fee = lens g s where
-    g = txFee
-    s tx v = tx { txFee = v }
-
-mint :: Lens' Tx Value
-mint = lens g s where
-    g = txMint
-    s tx v = tx { txMint = v }
-
-mintScripts :: Lens' Tx (Set.Set MintingPolicy)
-mintScripts = lens g s where
-    g = txMintScripts
-    s tx fs = tx { txMintScripts = fs }
-
-redeemers :: Lens' Tx Redeemers
-redeemers = lens g s where
-    g = txRedeemers
-    s tx reds = tx { txRedeemers = reds }
-
-datumWitnesses :: Lens' Tx (Map DatumHash Datum)
-datumWitnesses = lens g s where
-    g = txData
-    s tx dat = tx { txData = dat }
-
-lookupSignature :: PubKey -> Tx -> Maybe Signature
-lookupSignature s Tx{txSignatures} = Map.lookup s txSignatures
-
-lookupDatum :: Tx -> DatumHash -> Maybe Datum
-lookupDatum Tx{txData} h = Map.lookup h txData
-
-lookupRedeemer :: Tx -> RedeemerPtr -> Maybe Redeemer
-lookupRedeemer tx p = Map.lookup p (txRedeemers tx)
-
--- | Check that all values in a transaction are non-negative.
-validValuesTx :: Tx -> Bool
-validValuesTx Tx{..}
-  = all (nonNegative . txOutValue) txOutputs  && nonNegative txFee
-    where
-      nonNegative i = V.geq i mempty
-
--- | A transaction without witnesses for its inputs.
-data TxStripped = TxStripped {
-    txStrippedInputs  :: Set.Set TxOutRef,
-    -- ^ The inputs to this transaction, as transaction output references only.
-    txStrippedOutputs :: [TxOut],
-    -- ^ The outputs of this transation.
-    txStrippedMint    :: !Value,
-    -- ^ The 'Value' minted by this transaction.
-    txStrippedFee     :: !Value
-    -- ^ The fee for this transaction.
-    } deriving (Show, Eq, Generic, Serialise)
-
-strip :: Tx -> TxStripped
-strip Tx{..} = TxStripped i txOutputs txMint txFee where
-    i = Set.map txInRef txInputs
+
+-- | A transaction ID, using a SHA256 hash as the transaction id.
+newtype TxId = TxId { getTxId :: PlutusTx.BuiltinByteString }
+    deriving stock (Eq, Ord, Generic)
+    deriving anyclass (NFData)
+    deriving newtype (PlutusTx.Eq, PlutusTx.Ord)
+    deriving (Show, Pretty, IsString) via LedgerBytes
 
 -- | A tag indicating the type of script that we are pointing to.
--- NOTE: Cert/Reward are not supported right now.
 data ScriptTag = Spend | Mint | Cert | Reward
     deriving stock (Show, Eq, Ord, Generic)
-    deriving anyclass (Serialise, ToJSON, FromJSON, NFData)
+    deriving anyclass (NFData)
 
 -- | A redeemer pointer is a pair of a script type tag t and an index i, picking out the ith
 -- script of type t in the transaction.
 data RedeemerPtr = RedeemerPtr ScriptTag Integer
     deriving stock (Show, Eq, Ord, Generic)
-    deriving anyclass (Serialise, ToJSON, FromJSON, ToJSONKey, FromJSONKey, NFData)
+    deriving anyclass (NFData)
 
 type Redeemers = Map RedeemerPtr Redeemer
 
@@ -267,7 +89,7 @@ data TxOutRef = TxOutRef {
     txOutRefIdx :: Integer -- ^ Index into the referenced transaction's outputs
     }
     deriving stock (Show, Eq, Ord, Generic)
-    deriving anyclass (Serialise, ToJSON, FromJSON, ToJSONKey, FromJSONKey, NFData)
+    deriving anyclass (NFData)
 
 instance Pretty TxOutRef where
     pretty TxOutRef{txOutRefId, txOutRefIdx} = pretty txOutRefId <> "!" <> pretty txOutRefIdx
@@ -285,7 +107,7 @@ data TxInType =
     | ConsumePublicKeyAddress -- ^ A transaction input that consumes a public key address.
     | ConsumeSimpleScriptAddress -- ^ Consume a simple script
     deriving stock (Show, Eq, Ord, Generic)
-    deriving anyclass (Serialise, ToJSON, FromJSON, NFData)
+    deriving anyclass (NFData)
 
 -- | A transaction input, consisting of a transaction output reference and an input type.
 data TxIn = TxIn {
@@ -293,7 +115,7 @@ data TxIn = TxIn {
     txInType :: Maybe TxInType
     }
     deriving stock (Show, Eq, Ord, Generic)
-    deriving anyclass (Serialise, ToJSON, FromJSON, NFData)
+    deriving anyclass (NFData)
 
 instance Pretty TxIn where
     pretty TxIn{txInRef,txInType} =
@@ -346,7 +168,7 @@ data TxOut = TxOut {
     txOutDatumHash :: Maybe DatumHash
     }
     deriving stock (Show, Eq, Generic)
-    deriving anyclass (Serialise, ToJSON, FromJSON, NFData)
+    deriving anyclass (NFData)
 
 instance Pretty TxOut where
     pretty TxOut{txOutAddress, txOutValue} =
@@ -367,6 +189,10 @@ txOutDatum TxOut{txOutDatumHash} = txOutDatumHash
 txOutPubKey :: TxOut -> Maybe PubKeyHash
 txOutPubKey TxOut{txOutAddress} = toPubKeyHash txOutAddress
 
+-- | The validator hash attached to a 'TxOut', if there is one.
+txOutValidatorHash :: TxOut -> Maybe ValidatorHash
+txOutValidatorHash TxOut{txOutAddress} = toValidatorHash txOutAddress
+
 -- | The address of a transaction output.
 outAddress :: Lens' TxOut Address
 outAddress = lens txOutAddress s where
@@ -384,29 +210,14 @@ isPubKeyOut = isJust . txOutPubKey
 
 -- | Whether the output is a pay-to-script output.
 isPayToScriptOut :: TxOut -> Bool
-isPayToScriptOut = isJust . txOutDatum

--- | A 'TxOut' along with the 'Tx' it comes from, which may have additional information e.g.
--- the full data script that goes with the 'TxOut'.
-data TxOutTx = TxOutTx { txOutTxTx :: Tx, txOutTxOut :: TxOut }
-    deriving stock (Show, Eq, Generic)
-    deriving anyclass (Serialise, ToJSON, FromJSON)
-
-txOutTxDatum :: TxOutTx -> Maybe Datum
-txOutTxDatum (TxOutTx tx out) = txOutDatum out >>= lookupDatum tx
+isPayToScriptOut = isJust . txOutValidatorHash
 
 -- | Create a transaction output locked by a public key.
 pubKeyHashTxOut :: Value -> PubKeyHash -> TxOut
 pubKeyHashTxOut v pkh = TxOut (pubKeyHashAddress pkh) v Nothing
 
--- | The transaction output references consumed by a transaction.
-spentOutputs :: Tx -> Set.Set TxOutRef
-spentOutputs = Set.map txInRef . txInputs
-
--- | Update a map of unspent transaction outputs and signatures
---   for a failed transaction using its collateral inputs.
-updateUtxoCollateral :: Tx -> Map TxOutRef TxOut -> Map TxOutRef TxOut
-updateUtxoCollateral tx unspent = unspent `Map.withoutKeys` (Set.map txInRef . txCollateral $ tx)
+PlutusTx.makeLift ''TxId
+PlutusTx.makeIsDataIndexed ''TxId [('TxId,0)]
 
 PlutusTx.makeIsDataIndexed ''TxOut [('TxOut,0)]
 PlutusTx.makeLift ''TxOut
