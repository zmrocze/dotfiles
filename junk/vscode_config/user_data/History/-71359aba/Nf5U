https://github.com/input-output-hk/hydra-poc/blob/759fee84475f951aaf2f35acdb8ab82094ec5fbf/plutus-cbor/bench/Main.hs#L163
https://cardano.stackexchange.com/a/4388
https://input-output-hk.github.io/cardano-node/cardano-api/Cardano-Api-Script.html
https://input-output-hk.github.io/cardano-node/cardano-api/lib/Cardano-Api-ScriptData.html

hashScriptData:
  - https://github.com/input-output-hk/cardano-ledger/blob/1db68a3ec0a2dcb5751004beb22b906162474f23/eras/alonzo/impl/src/Cardano/Ledger/Alonzo/Data.hs#L172
  - plutus-ledger/Ledger.Scripts DatumHash, RedeemerHash
  - 32 bytes

hashScript:
  - plutus-ledger/Ledger.Scripts ValidatorHash, MintingPolicyHash, StakingValidatorHash
  - https://input-output-hk.github.io/cardano-node/cardano-api/src/Cardano.Api.Script.html#line-818 (2)  ! blake224
  - https://input-output-hk.github.io/ouroboros-network/shelley-spec-ledger/Shelley-Spec-Ledger-Scripts.html
  - There's V1, V2, Plutus scripts. Each hashed differently to ScriptHash as specified by cardano spec (haven't looked), nevertheless how these are hashed is fixed in (2). Note: There is at least 2 ScriptHash types.
  - ValidatorHash, MintingPolicyHash etc are derived from above using serialiseToRawBytes https://input-output-hk.github.io/cardano-node/cardano-api/lib/Cardano-Api-SerialiseRaw.html.
  The serialization is fixed to one as if the hash is blake224.
  - https://github.com/input-output-hk/cardano-ledger/blob/ac51494e151af0ad99b937a787458ce71db0aaea/libs/cardano-ledger-core/src/Cardano/Ledger/Crypto.hs

  - Cardano.Api.Script ScriptHash is Hash (ADDRHASH StandardCrypto) EraIndependentScript
  where  ADDRHASH StandardCrypto = Blake2b_224
  therefore is 28 bytes. (newtype on Cardano.Ledger.Hashes ScriptHash)

  - plutus-ledger-api ScriptHash

  - Plutus Core Script -> serialized via flat to bytestring -> embeded as CBOR bytestring
    -> renamed as PlutusScript PlutusScriptV1 (PlutusScriptSerialised bytes) :: Script PlutusScriptV1
    -> hash like above ^ with blake224 -> embed resulting bytestring as PlutusTx.BuiltinBytestring


  - TODO document the way to achieve typed Cardano.Api.Script ScriptHash in cardano.api maybe

  - hashScriptData uses SafeHash StandardCrypto EraIndependentData == Hash StandardCrypto ... == Blake2b_256
  There is little encoding of data before calculating the hash, all translations are either constructor app/deapp or 1-1 fromPlutusData transformation.

# Pubkey

  - plutus-ledger/pubKeyHash :: PubKey -> PubKeyHash is Blake2b_224
  - plutus-ledger-api(old) PubKey was back in the days defined as SizedByteString 32 but this was removed. is it 64?
  - contemporary plutus-ledger-api doesn't export PubKey, maybe they realized it's underspecified and therefore unneeded, plutus-ledger pins older version
  - git log -L :PubKey:plutus-ledger-api/src/Plutus/V1/Ledger/Crypto.hs

# plutus-ledger-api/TxId
  - plutus-ledger/Ledger.Tx txId calculated double-sha256 hash of a transaction stripped from input witnesses

  - plutus-ledger/Ledger.Tx getCardanoTxId :: CardanoTx -> TxId 
  where CardanoTx ~= These Tx SomeCardanoApiTx gets TxId (plutus one) works more or less:
  getCardanoTxid (plutus-ledger Tx or both Tx and SomeC...Tx) = doublesha256 of Tx
                  SomeC...Tx = calculate TxId' (from cardano) -~> serialize to bytestring and embed in plutus TxId constructor. 
  
  . Its used by plutus tutorial Escrow.