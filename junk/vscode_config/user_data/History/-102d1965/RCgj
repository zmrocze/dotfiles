# Schnorr signatures

## Intro

My aim with is to explain Schnorr signatures, but in a way that doesn't make it look like an arbitral scheme. 
We are going to split the explanation into modular parts.

 - discrete logarithm
 - zero knowledge protocols
 - fiat-shamir heurestic

## Discrete logarithm

We are going to do calculations in modular arithmetic. But really the fact that it's modular arithmetic is an implementation detail.
We need a finite group G, where the discrete logarithm problem is hard. What is a group: [short reminder](#short-reminder-on-what-a-group-is) and [thorough explanation](). Having a group with binary operation $*$ lets write $a^n$ for repeated $n$-times $a*a*..*a$.

Discrete logarithm problem asks: Given $a$ and $b$ - knowing $b=a^n$ for some $n$ - what is $n$?

### Short reminder on what a group is

It is an algebraic structure with a single binary operation. The operation:
 - has a neutral element 1
 - is associative: (a*b)*c = a*(b*c)
 - is invertable: ∀x∃y x*y=1

A prime example is the set of functions `A -> A` with composition being the binary operation.